---
const navItems = [
  { text: "Projects", href: "/#work" },
  { text: "My Story", href: "/#about" },
  { text: "Creator Space", href: "/#creative-work" },
  { text: "Connect", href: "/#contact" },
];

const currentPath = Astro.url.pathname;
const isProjectPage = currentPath.includes('/projects/');
---

<header class="fixed w-full top-0 z-50 py-8">
  <div class="container">
    <nav class="flex items-center">
      <div class="flex items-center justify-between w-full">
        <div class="flex items-center justify-between w-full">
          <a 
            href="/" 
            class="text-xl tracking-[0.2em] uppercase text-white hover:text-accent transition-colors"
          >
            PT
          </a>
          
          <div class="hidden md:flex items-center gap-24">
            {navItems.map((item, index) => (
              <a 
                href={item.href}
                class={`text-xl tracking-[0.2em] uppercase transition-colors ${
                  index === 0 ? 'text-accent' : 'text-white hover:text-accent'
                }`}
                data-nav-link={isProjectPage ? 'true' : 'false'}
              >
                {item.text}
              </a>
            ))}
          </div>
          
          <!-- Mobile Menu Button -->
          <button 
            id="menuButton"
            class="md:hidden relative z-50 w-10 h-10 flex items-center justify-center"
            aria-label="Toggle menu"
          >
            <div class="w-6 h-6 flex flex-col justify-center items-center">
              <span class="w-full h-0.5 bg-white transform transition-all duration-300 origin-center"></span>
              <span class="w-full h-0.5 bg-white transform transition-all duration-300 origin-center mt-1.5"></span>
              <span class="w-full h-0.5 bg-white transform transition-all duration-300 origin-center mt-1.5"></span>
            </div>
          </button>
        </div>
      </div>
    </nav>
  </div>

  <!-- Mobile Navigation -->
  <div
    id="mobileMenu"
    class="fixed inset-0 bg-black/95 backdrop-blur-lg transform translate-x-full transition-transform duration-500 ease-in-out md:hidden flex flex-col items-center justify-center space-y-8"
  >
    {navItems.map((item, index) => (
      <a 
        href={item.href}
        class={`block text-2xl tracking-[0.2em] uppercase transition-colors ${
          index === 0 ? 'text-accent' : 'text-white hover:text-accent'
        }`}
        data-nav-link={isProjectPage ? 'true' : 'false'}
      >
        {item.text}
      </a>
    ))}
  </div>
</header>

<style>
  header {
    background: linear-gradient(180deg, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0) 100%);
  }

  #mobileMenu {
    will-change: transform;
  }

  #menuButton span {
    will-change: transform, opacity;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Mobile Menu Toggle
    const menuButton = document.getElementById("menuButton");
    const mobileMenu = document.getElementById("mobileMenu");
    const menuBars = menuButton?.querySelectorAll("span");
    let isOpen = false;

    function toggleMenu() {
      isOpen = !isOpen;
      
      // Toggle menu visibility
      if (mobileMenu) {
        mobileMenu.style.transform = isOpen ? "translateX(0)" : "translateX(100%)";
      }

      // Animate hamburger to "X"
      if (menuBars) {
        if (isOpen) {
          menuBars[0].style.transform = "rotate(45deg) translate(0.33rem, 0.33rem)";
          menuBars[1].style.opacity = "0";
          menuBars[2].style.transform = "rotate(-45deg) translate(0.33rem, -0.33rem)";
        } else {
          menuBars[0].style.transform = "rotate(0) translate(0, 0)";
          menuBars[1].style.opacity = "1";
          menuBars[2].style.transform = "rotate(0) translate(0, 0)";
        }
      }
    }

    menuButton?.addEventListener("click", toggleMenu);

    // Close menu when clicking a link
    document.querySelectorAll("#mobileMenu a").forEach(link => {
      link.addEventListener("click", () => {
        if (isOpen) {
          toggleMenu();
        }
      });
    });

    // Smooth Scroll for Internal Links
    function smoothScrollToSection(hash) {
      const targetSection = document.querySelector(hash);
      if (targetSection) {
        setTimeout(() => {
          targetSection.scrollIntoView({ behavior: "smooth", block: "start" });
        }, 300);
      }
    }

    // Handle navigation clicks for both same-page and cross-page scrolling
    document.querySelectorAll("a[href^='/#'], a[href*='#']").forEach(anchor => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const targetHash = this.getAttribute("href").split("#")[1];

        if (document.getElementById(targetHash)) {
          // If section exists on the same page, scroll smoothly
          document.getElementById(targetHash).scrollIntoView({ behavior: "smooth", block: "start" });
        } else {
          // If section is on another page, navigate first, then scroll after load
          sessionStorage.setItem('scrollToSection', targetHash);
          window.location.href = this.getAttribute("href").split("#")[0]; // Navigate without hash
        }
      });
    });

    // If page loads with a stored scroll target, scroll smoothly after load
    const storedSection = sessionStorage.getItem('scrollToSection');
    if (storedSection) {
      sessionStorage.removeItem('scrollToSection'); // Remove after use
      smoothScrollToSection(`#${storedSection}`);
    }
  });
</script>
